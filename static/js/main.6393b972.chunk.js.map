{"version":3,"sources":["Components/Profile.jsx","Components/FractalCard.jsx","Components/UserFractals.jsx","Containers/ProfileContainer.jsx","Static/About.jsx","Components/FractalCanvas.jsx","Components/FractalMachineInput.jsx","Components/ModalForm.jsx","Components/GuidanceModal.jsx","Containers/FractalMachine.jsx","Containers/Gallery.jsx","Components/NavBar.jsx","Components/Form.jsx","Static/NotFound.jsx","Static/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Profile","props","currentUser","username","FractalCard","useState","isClicked","setClicked","fractal","id","name","image","parameters","handleCardClick","exportFractal","e","target","href","context","className","onClick","theta","rules","axiom","setF","setG","src","alt","download","replace","toLowerCase","fetch","method","headers","localStorage","token","then","handleDeleteFractal","UserFractals","fractals","userFractals","filter","user_id","map","key","ProfileContainer","About","rel","COLORS","FractalCanvas","state","initialRender","calculateCurrentLen","n","len","calculatedLen","i","renderCanvas","fractalArr","fractalParams","initLen","split","myP5","calculateLSystem","drawLSystem","nextFractalArr","forEach","el","ruleEl","push","sketch","p","setup","createCanvas","background","angleMode","DEGREES","clear","segLen","randomCol","Math","floor","random","length","fractalArrLen","stroke","resetMatrix","translate","line","rotate","pop","loading","circle","draw","myRef","React","createRef","this","p5","current","handleCanvasChange","canvas","prevProps","_setupDone","setState","setTimeout","ref","Component","FractalMachineInput","handleFormSubmit","nValue","useRef","thetaValue","axiomValue","initLenValue","setFValue","setGValue","onSubmit","type","pattern","placeholder","defaultValue","min","max","step","value","ModalForm","fractalName","setFractalName","showModal","classname","preventDefault","saveFractal","onChange","handleModalClick","GuidanceModal","showGuidanceModal","handleGuidanceModalClick","FractalMachine","setFractalParams","currentCanvas","setCurrentCanvas","setShowModal","setShowGuidanceModal","dataURL","toDataURL","body","JSON","stringify","size","r","json","response","message","alert","handleSaveFractal","Gallery","NavBar","to","exact","handleLogOut","Form","password","handleSubmit","handleChange","formName","htmlFor","autoComplete","NotFound","Footer","App","user","handleResp","resp","history","location","pathname","console","log","error","handleLoginSubmit","userInfo","res","handleRegisterSubmit","newFractal","fractalArray","slice","parse","newFractalArray","fractalID","filteredFractalArr","renderForm","routerProps","renderProfile","parsedFractals","getItem","path","render","component","withRouter","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6393b972.chunk.js","sourcesContent":["import React from 'react';\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <p>Hello, <strong>{props.currentUser.username}</strong>.</p>\n    </div>\n  )\n}\n\nexport default Profile;","import React, { useState } from 'react';\n\nconst FractalCard = (props) => {\n\n  const [isClicked, setClicked] = useState(false)\n\n  let { id, name, image, username, parameters } = props.fractal\n\n  const handleInitialDeleteFractal = () => {\n    fetch(`https://everybody-loves-fractals.herokuapp.com/fractals/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Authorization\": `Bearer ${localStorage.token}`\n      }\n    })\n    .then( () => props.handleDeleteFractal(id) )\n  }\n\n  const handleCardClick = () => {\n    setClicked(!isClicked)\n  }\n\n  const exportFractal = (e) => {\n    e.target.href = image\n}\n\n  if (props.context === \"gallery\") {\n\n      return (\n        <div className=\"fractal-card\" >\n          <div className=\"fractal-img-wrapper\" onClick={handleCardClick} >\n          {isClicked === true ? \n            (<div className=\"extra-card-info\" >\n              <p><strong>Theta: </strong>{parameters.theta}</p>\n              <p><strong>Axiom: </strong>{parameters.rules.axiom}</p>\n              <p><strong>Ruleset F: </strong>{parameters.rules.setF}</p>\n              <p><strong>Ruleset G: </strong>{parameters.rules.setG}</p>\n            </div>) :\n             null\n             }\n          <img src={image} alt={name} />\n          </div>\n          <p><strong>Name: </strong>{name}</p>\n          <p><strong>Created by: </strong>{username}</p>\n          <a className=\"download-link\" href=\"test\" download={`${name.replace(/\\s+/g, '-').toLowerCase()}.png`} onClick={exportFractal}>⥥ Download as .PNG File</a>\n          <br /><br />\n        </div>\n      )\n    \n\n  } else if (props.context === \"profile\") {\n\n      return (\n        <div className=\"fractal-card\" >\n          <div className=\"fractal-img-wrapper\" onClick={handleCardClick} >\n          {isClicked === true ? \n            (<div className=\"extra-card-info\" >\n              <p><strong>Theta: </strong>{parameters.theta}</p>\n              <p><strong>Axiom: </strong>{parameters.rules.axiom}</p>\n              <p><strong>Ruleset F: </strong>{parameters.rules.setF}</p>\n              <p><strong>Ruleset G: </strong>{parameters.rules.setG}</p>\n            </div>) :\n             null\n             }\n          <img src={image} alt={name} />\n          </div>\n          <p><strong>Name: </strong>{name}</p>\n          <a className=\"download-link\" href=\"test\" download={`${name.replace(/\\s+/g, '-').toLowerCase()}.png`} onClick={exportFractal}>⥥ Download as .PNG File</a>\n          <br /><br />\n          <button className=\"delete-btn\" onClick={handleInitialDeleteFractal}>Delete</button>\n          <br /><br />\n        </div>\n      )\n    }\n}\n\nexport default FractalCard;","import React from 'react';\nimport FractalCard from './FractalCard';\n\nconst UserFractals = (props) => {\n\n  let fractals = props.fractals\n  let currentUser = props.currentUser\n  let userFractals = fractals.filter( fractal => fractal.user_id === currentUser.id )\n\n  const renderFractals = () => {\n    return userFractals.map( fractal => {\n      return (\n        <FractalCard \n          key={fractal.id} \n          fractal={fractal} \n          context=\"profile\" \n          handleDeleteFractal={props.handleDeleteFractal}\n        />\n      )\n    })\n  }\n\n  return (\n    <div className=\"fractal-card-container\" >\n      {renderFractals()}\n    </div>\n  )\n\n}\n\nexport default UserFractals;","import React from 'react';\nimport Profile from '../Components/Profile';\nimport UserFractals from '../Components/UserFractals';\n\nconst ProfileContainer = (props) => {\n  return (\n    <div>\n      <h2>Profile</h2>\n      <Profile \n        currentUser={props.currentUser} \n      />\n      <h5>Your fractals:</h5>\n      <UserFractals \n        currentUser={props.currentUser}\n        fractals={props.fractals} \n        handleDeleteFractal={props.handleDeleteFractal}\n      />\n    </div>\n  )\n}\n\nexport default ProfileContainer;","import React from 'react';\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <h2>Fractals are for lovers.</h2>\n      <h4>What are Fractals?</h4>\n      <p className=\"about-paragraph\">\n      I'm glad you asked! Fractals are complex geometric patterns that are defined by self-similarity. In other words, their inner components resemble the whole shape. Due to their recursive nature, they can, essentially, continue indefinitely when magnified. This scaling symmetry lends particularly well to computer generated graphics - which is what we're doing here!\n      There are many purely geometric examples of fractals - a few famous ones are the <a href=\"https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle\" target=\"_blank\" rel=\"noopener noreferrer\">Sierpinski Triangle</a>, <a href=\"https://en.wikipedia.org/wiki/Koch_snowflake\" target=\"_blank\" rel=\"noopener noreferrer\">Koch Snowflake</a>, and <a href=\"https://en.wikipedia.org/wiki/Dragon_curve\" target=\"_blank\" rel=\"noopener noreferrer\">Dragon Curve</a>.\n      However, although they <i>technically</i> cannot be infinite, fractals also appear in nature. Think of a lightning bolt, a leaf vein, a coastline from above, or a branching tree - see how they resemble a fractal pattern?\n      Such similarities have not gone unnoticed. In fact, it is a perfect segway into our next topic.</p>\n\n      <h4>Our Drawing Instructions: L-Systems</h4>\n      <p className=\"about-paragraph\">\n      Fractals can be drawn a few different ways, most of which involve recursion. However, we are using the specific method of the Lindenmayer System - or <a href=\"https://en.wikipedia.org/wiki/L-system\" target=\"_blank\" rel=\"noopener noreferrer\">L-System</a>.\n\n      What is an L-System? Another fantastic question! First and foremost, it's a language system that operates with a specific grammar. It consists of an \"alphabet\" that is used to write \"production rules\" that are used to generatively calculate a string of instructions, with a base case that the production rules are initially operated on (the axiom). \n      In the late 1960s, a botanist named Astrid Lindenmayer used L-Systems to describe plant cells, growth processes, and plant development. They are generally fairly simple, compared to what they produce, which is why they are so attractive for the kind of fractal generation we're doing here. Here is what they look like at a basic level:\n      <br/>\n      <br/>\n      <div className=\"about-rules\">\n      <b>Alphabet:</b> A B\n      <br/>\n      <b>Axiom:</b> A\n      <br/>\n      <b>Rule 1:</b>A → ABA\n      <br/>\n      <b>Rule 2:</b>B → BB\n      <br/><br/>\n      n = 0: A\n      <br/>\n      n = 1: ABA\n      <br/>\n      n = 3: ABA BB ABA\n      <br/>\n      n = 4: ABA BB ABA BB BB ABA BB ABA\n      <br/>\n      </div>\n      <br/>\n      Our L-System, which is quite common for fractal generation, looks like this:\n\n      \n      <div className=\"about-rules\">\n      <h5>Terms:</h5><br/>\n      <b>θ Theta:</b> This refers to the angle the lines turn.<br/>\n      <b>Length:</b> This refers to the initial length of the line segment. It decreases with each generation.<br/>\n      <b>Axiom:</b> This is the base rule.<br/>\n      <b>Ruleset F:</b> For each encounter of 'F', these instructions are appended.<br/>\n      <b>Ruleset G:</b> For each encounter of 'G', these instructions are appended.<br/>\n      <h5>Rule Definitions:</h5>\n      <b>F:</b> Move forward and draw a line.<br/>\n      <b>G:</b> Move forward, but do not draw a line.<br/>\n      <b>+:</b> Rotate at the angle defined by theta.<br/>\n      <b>-:</b> Rotate at the angle opposite of theta.<br/>\n      <b>[:</b> Save current state (push)<br/>\n      <b>]:</b> Return to saved state (pop)<br/>\n      </div>\n      <br/>\n      Based on the parameters passed in, we first calculate the string of instructions with a recursive function, and then draw them iteratively onto a canvas.\n      </p>\n\n      <h4>At this time, this application is designed to draw fractal trees.</h4>\n\n      <p className=\"about-paragraph\">Although all kinds of fractals can be drawn with L-Systems, this implementation of them works best with fractal trees. Due to fractal pattern's irregular scaling rate, we found that this was the most versatile for keeping \n        the drawing on the canvas (we want you to be able to see your lovely fractal creations!). The drawing point is currently fixed, but we hope to make it more dynamic in the future to be able to handle many types of fractals.</p>\n\n      <h4>What was this site built with?</h4>\n      <p>For the front end, we're using JavaScript with the React framework and the library of <a href=\"https://p5js.org/\" target=\"_blank\" rel=\"noopener noreferrer\">P5.js</a> for graphics processing. For the back end, we're using Rails as an API. </p>\n\n      <h5>Special Thanks</h5>\n      <p className=\"about-paragraph\"> Endless thanks to <a href=\"https://thecodingtrain.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Dan Shiffman</a>, for his enthusiasm for graphics processing. He is the reason we were able to implement this in such a short time span \n        (less than 5 days!). Without him, this application would not as shiny as it is. If you are interested, please look into his work - you will not be disappointed!\n       </p> \n       \n    </div>\n  )\n}\n\nexport default About;","import React from 'react';\nimport p5 from 'p5';\n\n// constant color array to grab random colors from when new fractal is drawn\nconst COLORS = [\"#754687\", \"#465a87\", \"#c94f96\", \"#ebaa28\", \"#73a157\", \"#52afb3\", \"#d42f50\", \"#edc234\", \"#ff7340\"]\n\nclass FractalCanvas extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef(); // ref to canvas\n    }\n\n    // set initial state so that canvas renders default fractal on page load\n    state = {\n        initialRender: false\n    }\n\n    // create p5 canvas\n    componentDidMount() {\n        this.myP5 = new p5 (this.sketch, this.myRef.current)\n        this.props.handleCanvasChange(this.myP5.canvas)\n    }\n\n    // to avoid unecessary re-renders\n    shouldComponentUpdate(prevProps) {\n        // canvas renders something initially once p5 is completely loaded\n        if (!this.state.initialRender && this.myP5._setupDone) {\n            this.setState({initialRender: true})\n            return true;\n        // after that, only re-render when the input params have changed\n        }else if (prevProps.fractalParams === this.props.fractalParams) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    // render loading screen between updates\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props && this.myP5._setupDone) {\n            this.myP5.loading();\n            setTimeout(this.renderCanvas, 1200);\n            this.props.handleCanvasChange(this.myP5.canvas); // handle changes to canvas so PNG export reflects current version\n        }\n    }\n\n    // when n increases, line segments need to be shortened respectively\n    calculateCurrentLen = (n, len) => {\n        let calculatedLen = len;\n        for (let i = 0; i < n; i++) {\n            calculatedLen *= 0.5\n        }\n        return calculatedLen;\n    }\n\n    // render canvas function\n    // responsible for calculating instructions and then drawing the fractal based on params\n    renderCanvas = () => {\n        let {n, theta, axiom, initLen, setF, setG} = this.props.fractalParams;\n        \n        let fractalArr;\n        let len = this.calculateCurrentLen(n, initLen);\n\n        const rules = {\n            axiom: axiom.split(\"\"),\n            setF: setF.split(\"\"),\n            setG: []\n        }\n\n        // set G is optional\n        if (setG) {\n            rules.setG = rules.setG = setG.split(\"\");\n        }\n    \n        // calculate the string of instructions, then pass that to the drawing function\n        if (this.myP5) {\n            fractalArr = this.calculateLSystem(n, rules);\n            this.myP5.drawLSystem(fractalArr, len, theta);\n        }\n        \n    }\n\n    // responsible for calculating the string of instructions for the drawing function\n    calculateLSystem = (n, rules) => {\n\n        // initialize empty array that will hold all the instructions\n        // this needs to happen because the fractal array would have unneccesarry instructions appended to it\n        let nextFractalArr = [];\n\n        // recursively append production rules to the next fractal array\n        if (n === 1 || n === 0) {\n            return rules.axiom;\n        } else {\n            let fractalArr = this.calculateLSystem(n - 1, rules);\n        \n            fractalArr.forEach((el) => {\n                if (el === 'F') {\n                    // for each encounter of an 'F' character, append all characters in ruleSetF \n                    let tempFractalArr = rules.setF;\n                    tempFractalArr.forEach((ruleEl) => {nextFractalArr.push(ruleEl)});\n                } else if (el === 'G') {\n                    // same as above, but for ruleSetG\n                    let tempFractalArr = rules.setG;\n                    tempFractalArr.forEach((ruleEl) => {nextFractalArr.push(ruleEl)});\n                } \n                // all other elements simply get appended\n                else if (el === '+') {\n                    nextFractalArr.push(el);\n                } else if (el === '-') {\n                    nextFractalArr.push(el);\n                } else if (el === '[') {\n                    nextFractalArr.push(el);\n                } else if (el === ']') {\n                    nextFractalArr.push(el);\n                }\n            });\n            return nextFractalArr;\n        }\n    }\n\n    // p5 in instance mode\n    sketch = (p) => {\n\n        p.setup = () => {\n            p.createCanvas(500, 500);\n            p.background(255);\n            p.angleMode(p.DEGREES)\n            p.clear()\n        }\n\n        // function responsible for drawing based on calculated set of instructions\n        p.drawLSystem = (fractalArr, segLen, theta) => {\n            // get random color from constant array\n            const randomCol = COLORS[Math.floor(Math.random() * COLORS.length)]\n\n            const fractalArrLen = fractalArr.length\n            \n            // set background to white, set stroke to random color\n            p.background(255)\n            p.stroke(randomCol)\n\n            // reset drawing matrix and start the drawing point at the middle and bottom of canvas\n            p.resetMatrix()\n            p.translate(250 , 500)\n            \n            // iterate through the set of instructions and draw accordingly\n            for (let i = 0; i < fractalArrLen; i++) {\n                const el = fractalArr[i];\n\n                if (el === 'F') {\n                    p.line(0, 0, 0, -segLen);\n                    p.translate(0, -segLen);\n                } else if (el === 'G') {\n                    p.translate(0, -segLen)\n                } else if (el === '+') {\n                    p.rotate(theta);\n                } else if (el === '-') {\n                    p.rotate(-theta);\n                } else if (el === '[') {\n                    p.push()\n                } else if (el === ']') {\n                    p.pop()\n                }\n            }\n        }\n\n        // loading screen\n        p.loading = () => {\n            p.clear()\n            p.background(255)\n            p.circle(250,250,100)\n        }\n\n    \n        // not using the draw function because we aren't animating anything\n        p.draw = () => {\n        }\n    }\n    \n\n\n    render() {       \n        return (\n            <>\n            <h2>The Fractal Machine</h2>\n            <p>Hello. I am the fractal machine. I can make your dreams and nightmares come true.</p>\n            <div\n                className=\"canvas-container\"\n                ref={this.myRef} // ref to html5 canvas\n            />\n            </>\n        )\n    }\n\n} // end of FractalCanvas class\n\nexport default FractalCanvas;","import React, { useRef } from 'react';\n\nconst FractalMachineInput = (props) => {\n  \n    \n    let { n, theta, axiom, initLen, setF, setG } = props.fractalParams;\n  \n    const handleFormSubmit = props.handleFormSubmit;\n\n    // create refs to send changes up to parent on form submit\n    const nValue = useRef();\n    const thetaValue = useRef();\n    const axiomValue = useRef();\n    const initLenValue = useRef();\n    const setFValue = useRef();\n    const setGValue = useRef();\n\n\n    return (\n        <div className=\"fractal-input-container\">\n\n          <h3> 『 Create⊶a⊷Fractal 』 </h3>\n\n          <div className=\"fractal-inputs\">\n\n          <form className=\"fractal-input-form\" onSubmit={(e) => {handleFormSubmit(e, nValue, thetaValue, axiomValue, initLenValue, setFValue, setGValue)}}>\n            <div className=\"inner-fractal-inputs-container\">\n            <label>Axiom: \n              <input\n              key={axiom}\n              ref={axiomValue}\n              className=\"fractal-form-input axiom\"\n              type=\"text\" \n              pattern=\"^[FG+\\-[\\]]*$\"\n              name=\"axiom\" \n              placeholder=\"Enter an Axiom...\" \n              defaultValue={axiom} \n            />\n            </label>\n            \n            <label>Rule F:\n            <input \n              key={setF}\n              ref={setFValue}\n              className=\"fractal-form-input rule-input\"\n              type=\"text\" \n              pattern=\"^[FG+\\-[\\]]*$\"\n              name=\"ruleF\" \n              placeholder=\"Enter a first rule...\" \n              defaultValue={setF}  \n            />\n             </label>\n            \n            <label>Rule G:\n            <input \n              key={setG}\n              ref={setGValue}\n              className=\"fractal-form-input rule-input\"\n              type=\"text\"\n              pattern=\"^[FG+\\-[\\]]*$\"\n              name=\"ruleG\" \n              placeholder=\"(optional)\"\n              defaultValue={setG} \n            />\n             </label>\n\n            <label>θ:\n            <input \n              key={theta}\n              ref={thetaValue}\n              className=\"fractal-form-input theta\"\n              type=\"number\" \n              name=\"theta\" \n              placeholder=\"Enter an angle...\" \n              defaultValue={theta}  \n            />\n            </label>\n\n            <div className=\"sliders\">\n            <label>Length:\n            <input \n              key={initLen}\n              ref={initLenValue}\n              className=\"fractal-form-input\"\n              type=\"range\" \n              name=\"length\" \n              min=\"100\" \n              max=\"500\" \n              step=\"25\"\n              defaultValue={initLen} \n            />\n            </label>\n\n           <label>Size:\n            <input \n              key={n}\n              ref={nValue}\n              className=\"fractal-form-input\"\n              type=\"range\" \n              name=\"size\" \n              min=\"1\" \n              max=\"8\" \n              step=\"1\"\n              defaultValue={n} \n            />\n             </label>\n             <input type=\"submit\" className=\"generate-btn\" value=\"⫷ Generate ⫸\" />\n             </div>\n            </div>\n           \n            \n          </form>\n\n          </div>\n\n        </div>\n      )\n    \n} // end of FractalMachineInput fn\n\nexport default FractalMachineInput;","import React, { useState } from 'react';\n\nconst ModalForm = (props) => {\n\n  const [fractalName, setFractalName] = useState(\"\")\n\n  const handleChangeInput = (e) => {\n    setFractalName(e.target.value)\n  }\n\n  const handleInitialSubmit = (e) => {\n    e.preventDefault()\n    props.saveFractal(fractalName)\n    setFractalName(\"\")\n  }\n\n  if (props.showModal === false) {\n    return null\n  } else {\n    return (\n      <div className=\"modal\">\n        <div className=\"modal-content\">\n        <form classname=\"save-fractal-form\" onSubmit={handleInitialSubmit}>\n          <label>Enter a name: \n          <input type=\"text\" name=\"name\" placeholder=\"name...\" value={fractalName} onChange={handleChangeInput} />\n          </label>\n          <br />\n          <input type=\"submit\" value=\"Save fractal\" />\n        </form>\n        <button onClick={props.handleModalClick}>-𝕏-</button>\n      </div>\n      </div>\n    )\n  }\n\n}\n\nexport default ModalForm;","import React from \"react\"\n\nconst GuidanceModal = (props) => {\n\n        if (props.showGuidanceModal === false) {\n            return null\n        } else {\n        return (\n        <div className=\"modal guidance\">\n            <div className=\"modal-content guidance-content\">\n                <h3 className=\"guidance-header\">Terms:</h3>\n                    <p><b>θ Theta: </b>This refers to the angle the lines turn.</p>\n                    <p><b>Length: </b>This refers to the initial length of the line segment. It decreases with each generation.</p>\n                    <p><b>Axiom: </b>This is the base rule.</p>\n                    <p><b>Ruleset F: </b>For each encounter of 'F', these instructions are appended.</p>\n                    <p><b>Ruleset G: </b>For each encounter of 'G', these instructions are appended.</p>\n\n                <h3 className=\"guidance-header\">Rule Definitions:</h3>\n                    <p><b>F: </b>Move forward and draw a line.</p>\n                    <p><b>G: </b>Move forward, but do not draw a line.</p>\n                    <p><b>+: </b>Rotate at the angle defined by theta.</p>\n                    <p><b>-: </b>Rotate at the angle opposite of theta.</p>\n                    <p><b>[: </b>Save current state (push)</p> \n                    <p><b>]: </b>Return to saved state (pop)</p> \n                <h3 className=\"guidance-header\">Some common branch designs:</h3> \n                    <p><b>θ: </b>35</p>\n                    <p><b>Axiom: </b>F</p>\n                    <p><b>Ruleset F: </b>F[+FF][-FF]F[-F][+F]F</p>\n                <br/>\n                    <p><b>θ: </b>22</p>\n                    <p><b>Axiom: </b>G</p>\n                    <p><b>Ruleset F: </b>FF</p>\n                    <p><b>Ruleset G: </b>F-[[G]+G]+F[+FG]-G</p>\n                <br/>\n                    <p><b>θ: </b>20</p>\n                    <p><b>Axiom: </b>G</p>\n                    <p><b>Ruleset F: </b>FF</p>\n                    <p><b>Ruleset G: </b>F[+G]F[-G]+G</p>\n                <button onClick={props.handleGuidanceModalClick}>-𝕏-</button>\n                </div>\n        </div>\n         ) }\n            }\nexport default GuidanceModal","import React, { useState } from 'react';\nimport FractalCanvas from '../Components/FractalCanvas';\nimport FractalMachineInput from '../Components/FractalMachineInput';\nimport ModalForm from '../Components/ModalForm'\nimport GuidanceModal from '../Components/GuidanceModal'\n\n\nconst FractalMachine = (props) => {\n\n    // set initial state to default fractal\n    const [fractalParams, setFractalParams] = useState({\n        axiom: \"F\",\n        setF: \"FF+[+F-F-F]-[-F+F+F]\" ,\n        setG: \"\",\n        theta: 20,\n        initLen: 200,\n        n: 1\n    })\n\n    // set state to the current canvas for export \n    const [currentCanvas, setCurrentCanvas] = useState()\n\n    // conditional rendering state for pop up modals\n    const [showModal, setShowModal] = useState(false)\n    const [showGuidanceModal, setShowGuidanceModal] = useState(false)\n\n\n    // takes in the input from the fractal parameter form\n    // this is triggered when the user clicks \"generate\"\n    const handleFormSubmit = (e, nValue, thetaValue, axiomValue, initLenValue, setFValue, setGValue) => {\n        e.preventDefault()\n  \n        setFractalParams({\n            axiom: axiomValue.current.value,\n            setF: setFValue.current.value,\n            setG: setGValue.current.value,\n            theta: thetaValue.current.value,\n            initLen: initLenValue.current.value,\n            n: nValue.current.value \n        })\n    }\n\n    // keep up to date with changes to the canvas\n    const handleCanvasChange = (canvas) => {\n        setCurrentCanvas(canvas)\n    }\n\n    // show or hide pop-up modals\n    const handleModalClick = () => {\n        setShowModal(!showModal)\n    }\n    \n    const handleGuidanceModalClick = () => {\n        setShowGuidanceModal(!showGuidanceModal)\n    }\n    \n    // save fractal to the gallery and persist it to back-end\n    const saveFractal = (fractalName) => {\n        setShowModal(!showModal)\n\n        const dataURL = currentCanvas.toDataURL()\n        const {n, theta, axiom, initLen, setF, setG} = fractalParams;\n       \n        fetch('https://everybody-loves-fractals.herokuapp.com/fractals', {\n            method: \"POST\",\n            headers: {\n                \"content-type\": \"application/json\",\n                \"Authorization\": `bearer ${props.token}`\n            },\n            body: JSON.stringify({\n                name: fractalName,\n                image: dataURL,\n                parameters: {\n                    theta: theta,\n                    length: initLen,\n                    size: n,\n                    rules: {\n                        axiom: axiom,\n                        setF: setF,\n                        setG: setG\n                    }\n                }\n            })\n        })\n        .then( r => r.json() )\n        .then( response => {\n            if (response.message) {\n                alert(response.message)\n            } else {\n                props.handleSaveFractal(response)\n            }\n        })\n    }\n\n    // export as PNG download\n    const exportFractal = (e) => {\n        const dataURL = currentCanvas.toDataURL()\n        e.target.href = dataURL\n    }\n\n    return(\n        <div>\n            <FractalCanvas \n                fractalParams={fractalParams}\n\n                handleCanvasChange={handleCanvasChange}\n            />\n            <div>\n                <button onClick={handleGuidanceModalClick}>Need guidance?</button>\n            </div>\n\n            <FractalMachineInput \n                fractalParams={fractalParams}\n\n                handleFormSubmit={handleFormSubmit}\n            />\n            \n            <div className=\"fractal-buttons\">\n                <span>\n                    {\n                        <button onClick={handleModalClick}> Save Fractal to Gallery ⥣</button>\n                    }\n               \n                    <ModalForm \n                        showModal={showModal} \n                        handleModalClick={handleModalClick}\n                        saveFractal={saveFractal}\n                    />\n                    <GuidanceModal\n                        showGuidanceModal={showGuidanceModal}\n                        handleGuidanceModalClick={handleGuidanceModalClick}\n                    />\n                    <a className=\"download-link\" href=\"test\" download=\"fractal.png\" onClick={exportFractal}>⥥ Download as .PNG File </a>\n                </span>\n            </div>\n\n        </div>\n    )\n}\n\nexport default FractalMachine;","import React from 'react';\nimport FractalCard from '../Components/FractalCard';\n\nconst Gallery = (props) => {\n\n    const renderAllFractals = () => {\n        return props.fractals.map( fractal => {\n            return <FractalCard key={fractal.id} fractal={fractal} context=\"gallery\" />\n        })\n    }\n\n    return(\n        <div className=\"gallery\">\n            <h2>Gallery</h2>\n            <div className=\"fractal-card-container\" >\n                {renderAllFractals()}\n            </div>\n        </div>\n    )\n\n\n}\n\nexport default Gallery;","\nimport React from 'react';\nimport {NavLink} from 'react-router-dom'\n\nconst NavBar = (props) => {\n  if (props.currentUser.id === 0) {\n    return(\n      <ul className=\"nav\">\n        <li className=\"grow\">\n          <NavLink to=\"/about\">About</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/\" exact>Fractal Machine</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/gallery\">Gallery</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/login\">Login</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/register\">Register</NavLink>\n        </li>\n      </ul>\n    )\n  } else {\n    return(\n      <ul className=\"nav\">\n        <li className=\"grow\">\n          <NavLink to=\"/about\">About</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/\" exact >Fractal Machine</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/gallery\">Gallery</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/profile\">Profile</NavLink>\n        </li>\n        <li className=\"grow\">\n          <NavLink to=\"/\" onClick={props.handleLogOut}>Log Out</NavLink>\n        </li>\n      </ul>\n    )\n  }\n};\n\nexport default NavBar;","import React, { Component } from 'react';\n\nclass Form extends Component {\n\n  state = {\n    username: \"\",\n    password: \"\"\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    this.props.handleSubmit(this.state)\n  }\n\n  handleChange = (e) => {\n    let {name, value} = e.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  render() {\n    let {formName} = this.props\n    let {username, password} = this.state\n\n    return (\n      <form className=\"login-register-form\" onSubmit={this.handleSubmit}>\n        <h1>{formName}</h1>\n        <label htmlFor=\"username\">Username:\n        <input type=\"text\" autoComplete=\"off\" name=\"username\" value={username} onChange={this.handleChange}/>\n        </label>\n        <label htmlFor=\"password\">Password:\n        <input type=\"password\" autoComplete=\"off\" name=\"password\" value={password} onChange={this.handleChange}/>\n        </label>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n    );\n  }\n\n}\n\nexport default Form;","import React from 'react';\n\nconst NotFound = () => {\n  return (\n    <div>\n      <h3>Page Not Found</h3>\n    </div>\n  )\n}\n\nexport default NotFound;","import React from 'react';\n\nconst Footer = () => {\n\n  return (\n    <div className=\"footer\">\n      <p>Made by <a href=\"https://github.com/rizz0s\" target=\"_blank\" rel=\"noopener noreferrer\">@Summer</a> and <a href=\"https://github.com/SeanWelshBrown\" target=\"_blank\" rel=\"noopener noreferrer\">@Sean</a> [Access Labs // Brooklyn, 2020] ♡♥</p>\n    </div>\n  )\n\n}\n\nexport default Footer;","import React from 'react';\nimport './App.css';\n\nimport {Route, Switch} from 'react-router-dom';\nimport {withRouter} from 'react-router-dom';\n\nimport ProfileContainer from './Containers/ProfileContainer';\nimport About from './Static/About';\nimport FractalMachine from './Containers/FractalMachine';\nimport Gallery from './Containers/Gallery';\nimport NavBar from './Components/NavBar'\nimport Form from './Components/Form';\nimport NotFound from './Static/NotFound';\nimport Footer from './Static/Footer'\n\nclass App extends React.Component {\n\n  state = {\n    user: {\n      username: \"\",\n      id: 0\n    },\n    token: \"\",\n    fractals: []\n  }\n\n  componentDidMount() {\n    \n    fetch('https://everybody-loves-fractals.herokuapp.com/fractals')\n    .then( r => r.json() )\n    .then( fractals => {\n      if (fractals.length > 0) {\n        let parsedFractals = fractals.map( fractal => {\n          fractal.parameters = JSON.parse(fractal.parameters)\n          return fractal\n        })\n        this.setState({ fractals: parsedFractals })\n      }\n    })\n\n    if (localStorage.getItem(\"token\")) {\n\n      fetch(\"https://everybody-loves-fractals.herokuapp.com/persist\", {\n        headers: {\n          \"Authorization\": `Bearer ${localStorage.token}`\n        }\n      })\n        .then(r => r.json())\n        .then(this.handleResp)\n    }\n  }\n\n  handleResp = (resp) => {\n    if (resp.user) {\n      localStorage.token = resp.token\n      this.setState(resp, () => {\n        if (this.props.history.location.pathname === \"/login\" || this.props.history.location.pathname === \"/register\") {\n          console.log('hi')\n          this.props.history.push(\"/\")\n        }\n      })\n    }\n    else {\n      alert(resp.error)\n    }\n  }\n  \n  handleLoginSubmit = (userInfo) => {\n    return fetch(`https://everybody-loves-fractals.herokuapp.com/login`, {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(userInfo)\n    })\n      .then(res => res.json())\n      .then(this.handleResp)\n  }\n\n  handleRegisterSubmit = (userInfo) => {\n    fetch('https://everybody-loves-fractals.herokuapp.com/users', {\n      method: \"POST\",\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      body: JSON.stringify(userInfo)\n    })\n    .then( resp => resp.json() )\n    .then( this.handleResp )\n  }\n\n  handleLogOut = () => {\n    localStorage.clear()\n    this.setState({\n        user: {\n          username: \"\",\n          id: 0\n        },\n        token: \"\"\n    }, () => {\n      this.props.history.push(\"/\")\n    })\n  }\n\n  handleSaveFractal = (newFractal) => {\n    let fractalArray = this.state.fractals.slice()\n    newFractal.parameters = JSON.parse(newFractal.parameters)\n    let newFractalArray = [...fractalArray, newFractal]\n    this.setState({\n      fractals: newFractalArray\n    }, () => console.log(this.state))\n  }\n\n  handleDeleteFractal = (fractalID) => {\n    let filteredFractalArr = this.state.fractals.filter( fractal => fractal.id !== fractalID )\n    this.setState({ fractals: filteredFractalArr })\n  }\n\n  renderForm = (routerProps) => {\n    if(routerProps.location.pathname === \"/login\"){\n      return <Form formName=\"Login Form\" handleSubmit={this.handleLoginSubmit}/>\n    } else if (routerProps.location.pathname === \"/register\") {\n      return <Form formName=\"Register Form\" handleSubmit={this.handleRegisterSubmit}/>\n    }\n  }\n\n  renderProfile = (routerProps) => {\n    return  (\n      <ProfileContainer \n        currentUser={this.state.user} \n        token={this.state.token} \n        fractals={this.state.fractals} \n        handleDeleteFractal={this.handleDeleteFractal}\n      />\n    )\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"navContainer\">\n          <NavBar \n            currentUser={this.state.user} \n            handleLogOut={this.handleLogOut} \n          />\n        </div>\n        <div className=\"mainContent\">\n          <Switch>\n            <Route path=\"/login\" render={ this.renderForm } />\n            <Route path=\"/register\" render={ this.renderForm } />\n            <Route path=\"/about\" component={ About } />\n            <Route path=\"/gallery\">\n              <Gallery \n                fractals={this.state.fractals}\n              />\n            </Route>\n            <Route path=\"/profile\" render={ this.renderProfile } />\n            <Route path=\"/\" exact>\n              <FractalMachine \n                token={this.state.token} \n                handleSaveFractal={this.handleSaveFractal}\n              /> \n            </Route>\n            <Route component={NotFound} />\n          </Switch>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}